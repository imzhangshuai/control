<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context-3.2.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
				http://www.springframework.org/schema/task  
				http://www.springframework.org/schema/task/spring-task-3.2.xsd">
	
	<!-- 扫描定时任务注解  -->
	<task:annotation-driven/>  
	<context:component-scan base-package="com.team.mine.util"></context:component-scan>

	
	 <!-- spring的属性加载器，加载properties文件中的属性 -->
	 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		 <property name="ignoreResourceNotFound" value="false" />
	     <property name="properties" ref="configProperties" />
	 </bean>
     <!-- <context:property-placeholder location="/WEB-INF/config.properties"/> -->

      <!--创建 MYSQL jdbc数据源 -->
      <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
      </bean>
      
      
       <!-- 创建SqlSessionFactory，同时指定数据源-->
	   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	      <property name="dataSource" ref="dataSource" />
	      <!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效-->
	      <property  name="configLocation"  value="/WEB-INF/sqlMapConfig.xml"/>
	      <property  name="mapperLocations"  value="classpath*:com/team/mine/dao/xml/*.xml"/>  
	   </bean>  

		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">  
	        <constructor-arg index="0" ref="sqlSessionFactory"/>  
	    </bean>
	    
		<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	        <property name="locations">
	            <list>
	                <value>/WEB-INF/config.properties</value>
	            </list>
	        </property>
			<property name="fileEncoding" value="utf-8" />
	    </bean>
	    
	  
	  	<!-- Redis 分布式异步数据源配置 -->
	    <bean id="redisInitBean" class="org.spring.mine.redis.RedisInitBean" >
        <!-- IP:Port -->
        <constructor-arg index="0" type="List">
            <list>
                <value>${redis.master}</value>
                <!-- <value>${redis.slave1}</value> -->
            </list>
        </constructor-arg>    
        
        <constructor-arg index="1" type="long"> <value>10000</value></constructor-arg>    
        <constructor-arg index="2" type="int"><value>200</value></constructor-arg>    
        <constructor-arg index="3" type="Boolean"> <value>true</value>  </constructor-arg>        
    </bean>
	  
	
	<!-- 导入bean实体注入 -->
	 <import resource="classpath:bean-context.xml"></import>  
	 
</beans>